This patch improves performance with HTS voices in two ways:
a) Instead of loading all HTS voice models on each utterance,
it only reloads the models if the voice name has changed (i.e. a 
different voice is being used).

b) Disk usage is reduced: Before, speech parameters (mel cepstrum and
logf0 coefficients) were written to a temporal file and removed. Also, HTS text
features were passed to the HTS_Synthesize_Utt function by using a text file,
and most importantly the generated wavefile was saved to a temporal file and
reloaded from that file in an unnecessary intermediate step.

Now, by default speech parameters are not saved and deleted, HTS text features
are passed using a string, and the generated wavefile is loaded using a 
stringstream instead of a file.

This patch requires the tokenstream_istream.diff patch in speech-tools.

Author: Sergio Oller <sergioller@gmail.com>

Index: festival/src/modules/hts_engine/fest2hts_engine.cc
===================================================================
--- festival.orig/src/modules/hts_engine/fest2hts_engine.cc	2013-07-17 19:38:41.746696421 +0200
+++ festival/src/modules/hts_engine/fest2hts_engine.cc	2013-07-16 13:13:32.078371000 +0200
@@ -48,18 +48,23 @@
 #include <cstring>
 #include <cctype>
 #include "festival.h"
+#include <sstream>
 
 /* header of hts_engine API */
 #ifdef __cplusplus
 extern "C" {
 #endif
 #include "HTS_engine.h"
+#include "HTS_hidden.h"
 #ifdef __cplusplus
 }
 #endif
 /* Getfp: wrapper for fopen */
     static FILE *Getfp(const char *name, const char *opt)
 {
+   if (name == NULL) {
+      return NULL;
+   }
    FILE *fp = fopen(name, opt);
 
    if (fp == NULL) {
@@ -70,6 +75,22 @@
    return (fp);
 }
 
+static HTS_Engine *engine = NULL;
+static const char *cached_voice = NULL;
+
+/* HTS_Engine_save_speech_ostream: write generated speech to ostream */
+void HTS_Engine_save_speech_ostream(HTS_Engine * engine, std::ostream &os)
+{
+   int i;
+   short temp;
+   HTS_GStreamSet *gss = &engine->gss;
+
+   for (i = 0; i < HTS_GStreamSet_get_total_nsample(gss); i++) {
+      temp = HTS_GStreamSet_get_speech(gss, i);
+      os.write((char*) &temp,sizeof(short));
+   }
+}
+
 /* HTS_Synthesize_Utt: generate speech from utt by using hts_engine API */
 static LISP HTS_Synthesize_Utt(LISP utt)
 {
@@ -84,12 +105,11 @@
    char *fn_ms_gvl = NULL, *fn_ms_gvm = NULL;
    char *fn_ts_gvl = NULL, *fn_ts_gvm = NULL;
    char *fn_gv_switch = NULL;
+   char *label_string = NULL;
 
    FILE *labfp = NULL;
    FILE *lf0fp = NULL, *mcpfp = NULL, *rawfp = NULL, *durfp = NULL;
 
-   HTS_Engine engine;
-
    int sampling_rate;
    int fperiod;
    double alpha;
@@ -97,6 +117,12 @@
    double beta;
    double uv_threshold;
 
+   const char* current_voice = NULL;
+   
+   /* get current voice name */
+   current_voice = get_c_string(siod_get_lval("current-voice", NULL));
+   
+   
    /* get params */
    hts_engine_params =
        siod_get_lval("hts_engine_params",
@@ -140,12 +166,15 @@
 
    /* open input file pointers */
    labfp =
-       Getfp(get_param_str("-labelfile", hts_output_params, "utt.feats"), "r");
-
+       Getfp(get_param_str("-labelfile", hts_output_params, NULL), "r");
+   /* get input file pointer string */
+   label_string =
+       (char *) get_param_str("-labelstring", hts_output_params, NULL);
+   
    /* open output file pointers */
-   rawfp = Getfp(get_param_str("-or", hts_output_params, "tmp.raw"), "wb");
-   lf0fp = Getfp(get_param_str("-of", hts_output_params, "tmp.lf0"), "wb");
-   mcpfp = Getfp(get_param_str("-om", hts_output_params, "tmp.mgc"), "wb");
+   rawfp = Getfp(get_param_str("-or", hts_output_params, NULL), "wb");
+   lf0fp = Getfp(get_param_str("-of", hts_output_params, NULL), "wb");
+   mcpfp = Getfp(get_param_str("-om", hts_output_params, NULL), "wb");
    durfp = Getfp(get_param_str("-od", hts_output_params, "tmp.lab"), "wb");
 
    /* get other params */
@@ -156,45 +185,66 @@
    beta = (double) get_param_float("-b", hts_engine_params, 0.0);
    uv_threshold = (double) get_param_float("-u", hts_engine_params, 0.5);
 
+   std::stringstream waveos(std::stringstream::in|std::stringstream::out|std::stringstream::binary);
+   
    /* initialize */
-   HTS_Engine_initialize(&engine, 2);
-   HTS_Engine_set_sampling_rate(&engine, sampling_rate);
-   HTS_Engine_set_fperiod(&engine, fperiod);
-   HTS_Engine_set_alpha(&engine, alpha);
-   HTS_Engine_set_gamma(&engine, stage);
-   HTS_Engine_set_beta(&engine, beta);
-   HTS_Engine_set_msd_threshold(&engine, 1, uv_threshold);
-   HTS_Engine_set_audio_buff_size(&engine, 0);
-
-   /* load models */
-   HTS_Engine_load_duration_from_fn(&engine, &fn_ms_dur, &fn_ts_dur, 1);
-   HTS_Engine_load_parameter_from_fn(&engine, &fn_ms_mcp, &fn_ts_mcp, fn_ws_mcp,
-                                     0, FALSE, 3, 1);
-   HTS_Engine_load_parameter_from_fn(&engine, &fn_ms_lf0, &fn_ts_lf0, fn_ws_lf0,
-                                     1, TRUE, 3, 1);
-   HTS_Engine_load_gv_from_fn(&engine, &fn_ms_gvm, &fn_ts_gvm, 0, 1);
-   HTS_Engine_load_gv_from_fn(&engine, &fn_ms_gvl, &fn_ts_gvl, 1, 1);
-   HTS_Engine_load_gv_switch_from_fn(&engine, fn_gv_switch);
+   /* If voice name has not changed, keep cached parameters and models */
+   if ( cached_voice != NULL && current_voice != NULL && \
+        strcmp(cached_voice, current_voice)==0 ) {
+      HTS_Engine_refresh(engine);
+   } else {
+      HTS_Engine_clear(engine);
+      HTS_Engine_initialize(engine, 2);
+      HTS_Engine_set_sampling_rate(engine, sampling_rate);
+      HTS_Engine_set_fperiod(engine, fperiod);
+      HTS_Engine_set_alpha(engine, alpha);
+      HTS_Engine_set_gamma(engine, stage);
+      HTS_Engine_set_beta(engine, beta);
+      HTS_Engine_set_msd_threshold(engine, 1, uv_threshold);
+      HTS_Engine_set_audio_buff_size(engine, 0);
+
+      /* load models */
+      HTS_Engine_load_duration_from_fn(engine, &fn_ms_dur, &fn_ts_dur, 1);
+      HTS_Engine_load_parameter_from_fn(engine, &fn_ms_mcp, &fn_ts_mcp, fn_ws_mcp,
+                                        0, FALSE, 3, 1);
+      HTS_Engine_load_parameter_from_fn(engine, &fn_ms_lf0, &fn_ts_lf0, fn_ws_lf0,
+                                        1, TRUE, 3, 1);
+      HTS_Engine_load_gv_from_fn(engine, &fn_ms_gvm, &fn_ts_gvm, 0, 1);
+      HTS_Engine_load_gv_from_fn(engine, &fn_ms_gvl, &fn_ts_gvl, 1, 1);
+      HTS_Engine_load_gv_switch_from_fn(engine, fn_gv_switch);
+      cached_voice = current_voice;
+   }
 
    /* generate speech */
    if (u->relation("Segment")->first()) {       /* only if there segments */
-      HTS_Engine_load_label_from_fp(&engine, labfp);
-      HTS_Engine_create_sstream(&engine);
-      HTS_Engine_create_pstream(&engine);
-      HTS_Engine_create_gstream(&engine);
+      /* Load label from file pointer or from string */
+      if ( labfp != NULL ) {
+         HTS_Engine_load_label_from_fp(engine, labfp);
+      } else if ( label_string != NULL ) {
+         HTS_Engine_load_label_from_string(engine, label_string);
+      } else {
+         cerr << "No input label specified" << endl;
+         HTS_Engine_refresh(engine);
+         return utt;
+      }
+      
+      HTS_Engine_create_sstream(engine);
+      HTS_Engine_create_pstream(engine);
+      HTS_Engine_create_gstream(engine);
       if (rawfp != NULL)
-         HTS_Engine_save_generated_speech(&engine, rawfp);
+         HTS_Engine_save_generated_speech(engine, rawfp);
+      HTS_Engine_save_speech_ostream(engine, waveos);
       if (durfp != NULL)
-         HTS_Engine_save_label(&engine, durfp);
+         HTS_Engine_save_label(engine, durfp);
       if (lf0fp != NULL)
-         HTS_Engine_save_generated_parameter(&engine, lf0fp, 1);
+         HTS_Engine_save_generated_parameter(engine, lf0fp, 1);
       if (mcpfp != NULL)
-         HTS_Engine_save_generated_parameter(&engine, mcpfp, 1);
-      HTS_Engine_refresh(&engine);
+         HTS_Engine_save_generated_parameter(engine, mcpfp, 1);
+      HTS_Engine_refresh(engine);
    }
 
-   /* free */
-   HTS_Engine_clear(&engine);
+   /* free (keep models in cache) */
+   /* HTS_Engine_clear(engine); */
 
    /* close output file pointers */
    if (rawfp != NULL)
@@ -211,13 +261,13 @@
       fclose(labfp);
 
    /* Load back in the waveform */
+   EST_TokenStream ts;
+   ts.open(waveos);
    EST_Wave *w = new EST_Wave;
    w->resample(sampling_rate);
-
    if (u->relation("Segment")->first()) /* only if there segments */
-      w->load_file(get_param_str("-or", hts_output_params, "tmp.raw"), "raw",
+      w->load_file(ts, "raw",
                    sampling_rate, "short", str_to_bo("native"), 1);
-
    item = u->create_relation("Wave")->append();
    item->set_val("wave", est_val(w));
 
@@ -229,19 +279,18 @@
 
    for(o = r->first(), s = u->relation("Segment")->first() ; (o != NULL) && (s != NULL) ; o = o->next(), s = s->next() )
       if (o->S("name").before("+").after("-").matches(s->S("name")))
-         s->set("end",o->F("end")); 
+         s->set("end",o->F("end"));
       else
          cerr << "HTS_Synthesize_Utt: Output segment mismatch";
-
+   ts.close();
    delete r;
-
    return utt;
 }
 
 void festival_hts_engine_init(void)
 {
    char buf[1024];
-
+   engine = new HTS_Engine;
    HTS_get_copyright(buf);
    proclaim_module("hts_engine", buf);
 
Index: festival/lib/hts.scm
===================================================================
--- festival.orig/lib/hts.scm	2012-11-25 13:34:09.294010784 +0100
+++ festival/lib/hts.scm	2013-07-16 13:32:32.922418000 +0200
@@ -58,31 +58,37 @@
 (defvar hts_use_phone_align 0)
 
 (defSynthType HTS
-  (let ((featfile (make_tmp_filename))
-	(mcepfile (make_tmp_filename))
-	(f0file (make_tmp_filename))
-	(wavfile (make_tmp_filename))
-	(labfile (make_tmp_filename)))
+  (let (
+         ;(featfile (make_tmp_filename))
+	       ;(mcepfile (make_tmp_filename))
+         ;(f0file (make_tmp_filename))
+         ;(wavfile (make_tmp_filename))
+	        (labfile (make_tmp_filename))
+          (featstring "")
+       )
 
     (apply_hooks hts_synth_pre_hooks utt)
 
+    (set! featstring (hts_dump_feats_string utt hts_feats_list))
+    ;(hts_dump_feats utt hts_feats_list featfile)
+    
     (set! hts_output_params
-	  (list
-	   (list "-labelfile" featfile)
-	   (list "-om" mcepfile)
-	   (list "-of" f0file)
-	   (list "-or" wavfile)
-		 (list "-od" labfile))
+	   (list
+      (list "-labelstring" featstring)
+	    ;(list "-labelfile" featfile)
+	    ;(list "-om" mcepfile)
+	    ;(list "-of" f0file)
+	    ;(list "-or" wavfile)
+		  (list "-od" labfile)
+     )
 		)
 
-    (hts_dump_feats utt hts_feats_list featfile)
-
     (HTS_Synthesize utt)
 
-    (delete-file featfile)
-    (delete-file mcepfile)
-    (delete-file f0file)
-    (delete-file wavfile)
+    ;(delete-file featfile)
+    ;(delete-file mcepfile)
+    ;(delete-file f0file)
+    ;(delete-file wavfile)
     (delete-file labfile)
 
     (apply_hooks hts_synth_post_hooks utt)
@@ -90,167 +96,268 @@
 )
 
 (define (hts_feats_output ofd s)
+   (let ((text (hts_feats_output_string s)))
+      (format ofd "%s" text)
+    )
+)
+
+(define (hts_feats_output_string s)
   "This  is bad as it makes decisions about what the feats are"
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;  SEGMENT
+  (let ((output ""))
 
-;  boundary
-  (format ofd "%10.0f %10.0f " 
-	  (* 10000000 (item.feat s "segment_start"))
-	  (* 10000000 (item.feat s "segment_end")))
-
-;  pp.name
-  (format ofd "%s" (if (string-equal "0" (item.feat s "p.p.name"))
-		       "x" (item.feat s "p.p.name")))
-;  p.name
-  (format ofd "^%s" (if (string-equal "0" (item.feat s "p.name"))
-			"x" (item.feat s "p.name")))
-;  c.name
-  (format ofd "-%s" (if (string-equal "0" (item.feat s "name"))
-			"x" (item.feat s "name")))
-;  n.name
-  (format ofd "+%s" (if (string-equal "0" (item.feat s "n.name"))
-			"x" (item.feat s "n.name")))
-;  nn.name
-  (format ofd "=%s" (if (string-equal "0" (item.feat s "n.n.name"))
-			"x" (item.feat s "n.n.name")))
+  (set! output (string-append output 
+                          ;  boundary
+                          (format nil "%10.0f %10.0f " 
+	                            (* 10000000 (item.feat s "segment_start"))
+	                            (* 10000000 (item.feat s "segment_end"))
+                          )
+                          ;  pp.name
+                          (format nil "%s" 
+                               (if (string-equal "0" (item.feat s "p.p.name"))
+                                  "x" (item.feat s "p.p.name")))
+                          ;  p.name
+                          (format nil "^%s" (if (string-equal "0" (item.feat s "p.name"))
+                                  "x" (item.feat s "p.name")))
+                          ;  c.name
+                          (format nil "-%s" (if (string-equal "0" (item.feat s "name"))
+                                  "x" (item.feat s "name")))
+                          ;  n.name
+                          (format nil "+%s" (if (string-equal "0" (item.feat s "n.name"))
+			                            "x" (item.feat s "n.name")))
+                          ;  nn.name
+                          (format nil "=%s" (if (string-equal "0" (item.feat s "n.n.name"))
+			                              "x" (item.feat s "n.n.name")))
+               )
+  )
 
 ;  position in syllable (segment)
-  (format ofd "@")
-  (format ofd "%s" (if (string-equal "pau" (item.feat s "name"))
-		       "x" (+ 1 (item.feat s "pos_in_syl"))))
-  (format ofd "_%s" (if (string-equal "pau" (item.feat s "name"))
-			"x" (- (item.feat s "R:SylStructure.parent.R:Syllable.syl_numphones") 
-			       (item.feat s "pos_in_syl"))))
-
+  (set! output (string-append output 
+                                (format nil "@")
+               )
+  )
+  (set! output (string-append output 
+                                  (format nil "%s" (if (string-equal "pau" (item.feat s "name"))
+                                     "x" (+ 1 (item.feat s "pos_in_syl"))))
+               )
+  )
+  (set! output (string-append output 
+                                  (format nil "_%s" (if (string-equal "pau" (item.feat s "name"))
+		                                 	"x" (- (item.feat s "R:SylStructure.parent.R:Syllable.syl_numphones") 
+                                             (item.feat s "pos_in_syl"))))
+               )
+  )
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;;;  SYLLABLE
 
 ;; previous syllable
 
 ;  p.stress
-  (format ofd "/A:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.R:Syllable.stress")
-	      (item.feat s "R:SylStructure.parent.R:Syllable.p.stress")))
+  (set! output (string-append output 
+                        (format nil "/A:%s" 
+                          (if (string-equal "pau" (item.feat s "name"))
+                              (item.feat s "p.R:SylStructure.parent.R:Syllable.stress")
+                              (item.feat s "R:SylStructure.parent.R:Syllable.p.stress")))
+               )
+  )
 ;  p.accent
-  (format ofd "_%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.R:Syllable.accented")
-	      (item.feat s "R:SylStructure.parent.R:Syllable.p.accented")))
+  (set! output (string-append output 
+                      (format nil "_%s" 
+                        (if (string-equal "pau" (item.feat s "name"))
+                            (item.feat s "p.R:SylStructure.parent.R:Syllable.accented")
+                            (item.feat s "R:SylStructure.parent.R:Syllable.p.accented")))
+               )
+  )
+
 ;  p.length
-  (format ofd "_%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.R:Syllable.syl_numphones")
-	      (item.feat s "R:SylStructure.parent.R:Syllable.p.syl_numphones")))
+  (set! output (string-append output 
+                    (format nil "_%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          (item.feat s "p.R:SylStructure.parent.R:Syllable.syl_numphones")
+                          (item.feat s "R:SylStructure.parent.R:Syllable.p.syl_numphones")))
+               )
+  )
+
 ;; current syllable
 
 ;  c.stress
-  (format ofd "/B:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.stress")))
+  (set! output (string-append output 
+                    (format nil "/B:%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.R:Syllable.stress")))
+               )
+  )
+
 ;  c.accent
-  (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.accented")))
+  (set! output (string-append output 
+                      (format nil "-%s" 
+                          (if (string-equal "pau" (item.feat s "name"))
+                                "x"
+                                (item.feat s "R:SylStructure.parent.R:Syllable.accented")))
+               )
+  )
+
 ;  c.length
-  (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.syl_numphones")))
+  (set! output (string-append output 
+                        (format nil "-%s" 
+                          (if (string-equal "pau" (item.feat s "name"))
+                              "x"
+                              (item.feat s "R:SylStructure.parent.R:Syllable.syl_numphones")))
+               )
+  )
 
-;  position in word (syllable)
-  (format ofd "@%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1 (item.feat s "R:SylStructure.parent.R:Syllable.pos_in_word"))))
-  (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (- 
-	       (item.feat s "R:SylStructure.parent.parent.R:Word.word_numsyls")
-	       (item.feat s "R:SylStructure.parent.R:Syllable.pos_in_word"))))
 
+;  position in word (syllable)
+  (set! output (string-append output 
+                        (format nil "@%s" 
+                          (if (string-equal "pau" (item.feat s "name"))
+                              "x"
+                              (+ 1 (item.feat s "R:SylStructure.parent.R:Syllable.pos_in_word"))))
+               )
+  )
+
+  (set! output (string-append output 
+                          (format nil "-%s" 
+                            (if (string-equal "pau" (item.feat s "name"))
+                                "x"
+                                (- 
+                                 (item.feat s "R:SylStructure.parent.parent.R:Word.word_numsyls")
+                                 (item.feat s "R:SylStructure.parent.R:Syllable.pos_in_word"))))
+               )
+  )
+  
 ;  position in phrase (syllable)
-    (format ofd "&%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1
-		 (item.feat s "R:SylStructure.parent.R:Syllable.syl_in"))))
-    (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1
-		 (item.feat s "R:SylStructure.parent.R:Syllable.syl_out"))))
+  (set! output (string-append output 
+                        (format nil "&%s" 
+                        (if (string-equal "pau" (item.feat s "name"))
+                            "x"
+                            (+ 1
+                         (item.feat s "R:SylStructure.parent.R:Syllable.syl_in"))))
+               )
+  )
+
+  (set! output (string-append output 
+                    (format nil "-%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (+ 1
+                     (item.feat s "R:SylStructure.parent.R:Syllable.syl_out"))))
+               )
+  )
 
 ;  position in phrase (stressed syllable)
-    (format ofd "#%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1
-		 (item.feat s "R:SylStructure.parent.R:Syllable.ssyl_in"))))
-    (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1
-		 (item.feat s "R:SylStructure.parent.R:Syllable.ssyl_out"))))
+  (set! output (string-append output 
+                      (format nil "#%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (+ 1
+                       (item.feat s "R:SylStructure.parent.R:Syllable.ssyl_in"))))
+               )
+  )
+
+  (set! output (string-append output 
+                    (format nil "-%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (+ 1
+                     (item.feat s "R:SylStructure.parent.R:Syllable.ssyl_out"))))
+               )
+  )
 
 ;  position in phrase (accented syllable)
-    (format ofd "$%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1
-		 (item.feat s "R:SylStructure.parent.R:Syllable.asyl_in"))))
-    (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1
-		 (item.feat s "R:SylStructure.parent.R:Syllable.asyl_out"))))
+  (set! output (string-append output 
+                    (format nil "$%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (+ 1
+                     (item.feat s "R:SylStructure.parent.R:Syllable.asyl_in"))))
+               )
+  )
+
+  (set! output (string-append output 
+                      (format nil "-%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (+ 1
+                       (item.feat s "R:SylStructure.parent.R:Syllable.asyl_out"))))
+               )
+  )
+
 
 ;  distance from stressed syllable
-    (format ofd "!%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_p_stress")))
-    (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_n_stress")))
+  (set! output (string-append output 
+                    (format nil "!%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_p_stress")))
+               )
+  )
+
+  (set! output (string-append output 
+                    (format nil "-%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_n_stress")))
+               )
+  )
 
 ;  distance from accented syllable 
-    (format ofd ";%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_p_accent")))
-    (format ofd "-%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_n_accent")))
+  (set! output (string-append output 
+                      (format nil ";%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_p_accent")))
+               )
+  )
+
+  (set! output (string-append output 
+                    (format nil "-%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (item.feat s "R:SylStructure.parent.R:Syllable.lisp_distance_to_n_accent")))
+               )
+  )
+
 
 ;  name of the vowel of current syllable
-    (format ofd "|%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.R:Syllable.syl_vowel")))
+  (set! output (string-append output 
+                    (format nil "|%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (item.feat s "R:SylStructure.parent.R:Syllable.syl_vowel")))
+               )
+  )
+
 
 ;; next syllable
-  (format ofd "/C:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.R:Syllable.stress")
-	      (item.feat s "R:SylStructure.parent.R:Syllable.n.stress")))
+  (set! output (string-append output 
+                  (format nil "/C:%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        (item.feat s "n.R:SylStructure.parent.R:Syllable.stress")
+                        (item.feat s "R:SylStructure.parent.R:Syllable.n.stress")))
+               )
+  )
+
 ;  n.accent
-  (format ofd "+%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.R:Syllable.accented")
-	      (item.feat s "R:SylStructure.parent.R:Syllable.n.accented")))
-;  n.length
-  (format ofd "+%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.R:Syllable.syl_numphones")
-	      (item.feat s "R:SylStructure.parent.R:Syllable.n.syl_numphones"))) 
+  (set! output (string-append output 
+                  (format nil "+%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        (item.feat s "n.R:SylStructure.parent.R:Syllable.accented")
+                        (item.feat s "R:SylStructure.parent.R:Syllable.n.accented")))
+               )
+  )
 
+;  n.length
+  (set! output (string-append output 
+                (format nil "+%s" 
+                  (if (string-equal "pau" (item.feat s "name"))
+                      (item.feat s "n.R:SylStructure.parent.R:Syllable.syl_numphones")
+                      (item.feat s "R:SylStructure.parent.R:Syllable.n.syl_numphones")))
+               )
+  )
+ 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;  WORD
 
@@ -258,149 +365,210 @@
 ;; previous word
 
 ;  p.gpos
-  (format ofd "/D:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.parent.R:Word.gpos")
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.p.gpos")))
-;  p.lenght (syllable)
-  (format ofd "_%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.parent.R:Word.word_numsyls")
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.p.word_numsyls")))
+  (set! output (string-append output 
+                    (format nil "/D:%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          (item.feat s "p.R:SylStructure.parent.parent.R:Word.gpos")
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.p.gpos")))
+               )
+  )
+
+;  p.length (syllable)
+  (set! output (string-append output 
+                    (format nil "_%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          (item.feat s "p.R:SylStructure.parent.parent.R:Word.word_numsyls")
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.p.word_numsyls")))
+               )
+  )
+
 
 ;;;;;;;;;;;;;;;;;
 ;; current word
 
 ;  c.gpos
-  (format ofd "/E:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.gpos")))
-;  c.lenght (syllable)
-  (format ofd "+%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.word_numsyls")))
+  (set! output (string-append output 
+                    (format nil "/E:%s" 
+                        (if (string-equal "pau" (item.feat s "name"))
+                            "x"
+                            (item.feat s "R:SylStructure.parent.parent.R:Word.gpos")))
+               )
+  )
+
+;  c.length (syllable)
+  (set! output (string-append output 
+                    (format nil "+%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.word_numsyls")))
+               )
+  )
+
 
 ;  position in phrase (word)
-  (format ofd "@%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1 (item.feat s "R:SylStructure.parent.parent.R:Word.pos_in_phrase"))))
-  (format ofd "+%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.words_out")))
+  (set! output (string-append output 
+                  (format nil "@%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (+ 1 (item.feat s "R:SylStructure.parent.parent.R:Word.pos_in_phrase"))))
+                  (format nil "+%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (item.feat s "R:SylStructure.parent.parent.R:Word.words_out")))
+               )
+  )
+
+
+
 
 ;  position in phrase (content word)
-  (format ofd "&%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (+ 1 (item.feat s "R:SylStructure.parent.parent.R:Word.content_words_in"))))
-  (format ofd "+%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.content_words_out")))
+  (set! output (string-append output 
+                  (format nil "&%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (+ 1 (item.feat s "R:SylStructure.parent.parent.R:Word.content_words_in"))))
+                  (format nil "+%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        "x"
+                        (item.feat s "R:SylStructure.parent.parent.R:Word.content_words_out")))
+               )
+  )
+
 
 ;  distance from content word in phrase
-  (format ofd "#%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.lisp_distance_to_p_content")))
-  (format ofd "+%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.lisp_distance_to_n_content")))
+  (set! output (string-append output 
+                    (format nil "#%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.lisp_distance_to_p_content")))
+                    (format nil "+%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.lisp_distance_to_n_content")))
+               )
+  )
+
 
 ;;;;;;;;;;;;;;
 ;; next word
 
 ;  n.gpos
-  (format ofd "/F:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.parent.R:Word.gpos")
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.n.gpos")))
-;  n.lenghte (syllable)
-  (format ofd "_%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.parent.R:Word.word_numsyls")
-	      (item.feat s "R:SylStructure.parent.parent.R:Word.n.word_numsyls")))
+  (set! output (string-append output 
+                    (format nil "/F:%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          (item.feat s "n.R:SylStructure.parent.parent.R:Word.gpos")
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.n.gpos")))
+               )
+  )
+
+;  n.length (syllable)
+  (set! output (string-append output 
+                    (format nil "_%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          (item.feat s "n.R:SylStructure.parent.parent.R:Word.word_numsyls")
+                          (item.feat s "R:SylStructure.parent.parent.R:Word.n.word_numsyls")))
+               )
+  )
+
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;  PHRASE
 
 ;;;;;;;;;;;;;;;;;;;;
 ;; previous phrase
-
-;  length of previous phrase (syllable)
-  (format ofd "/G:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_syls_in_phrase")
-	      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.p.lisp_num_syls_in_phrase")))
-
-;  length of previous phrase (word)
-  (format ofd "_%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "p.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_words_in_phrase")
-	      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.p.lisp_num_words_in_phrase")))
+  (set! output (string-append output 
+                    ;  length of previous phrase (syllable)
+                      (format nil "/G:%s" 
+                        (if (string-equal "pau" (item.feat s "name"))
+                            (item.feat s "p.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_syls_in_phrase")
+                            (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.p.lisp_num_syls_in_phrase")))
+                    ;  length of previous phrase (word)
+                      (format nil "_%s" 
+                        (if (string-equal "pau" (item.feat s "name"))
+                            (item.feat s "p.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_words_in_phrase")
+                            (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.p.lisp_num_words_in_phrase")))
+               )
+  )
 
 ;;;;;;;;;;;;;;;;;;;;
 ;; current phrase
 
-;  length of current phrase (syllable)
-  (format ofd "/H:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_syls_in_phrase")))
-
-;  length of current phrase (word)
-  (format ofd "=%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      "x"
-	      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_words_in_phrase")))
-
-;  position in major phrase (phrase)
-  (format ofd "@%s" 
-	  (+ 1 (item.feat s "R:SylStructure.parent.R:Syllable.sub_phrases")))
-  (format ofd "=%s" 
-	  (- 
-	   (item.feat s "lisp_total_phrases")
-	   (item.feat s "R:SylStructure.parent.R:Syllable.sub_phrases")))
-
-;  type of tobi endtone of current phrase
-  (format ofd "|%s" 
-	  (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.daughtern.R:SylStructure.daughtern.tobi_endtone"))
+  (set! output (string-append output 
+                  ;  length of current phrase (syllable)
+                    (format nil "/H:%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_syls_in_phrase")))
+
+                  ;  length of current phrase (word)
+                    (format nil "=%s" 
+                      (if (string-equal "pau" (item.feat s "name"))
+                          "x"
+                          (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_words_in_phrase")))
+
+                  ;  position in major phrase (phrase)
+                    (format nil "@%s" 
+                      (+ 1 (item.feat s "R:SylStructure.parent.R:Syllable.sub_phrases")))
+                    (format nil "=%s" 
+                      (- 
+                       (item.feat s "lisp_total_phrases")
+                       (item.feat s "R:SylStructure.parent.R:Syllable.sub_phrases")))
+
+                  ;  type of tobi endtone of current phrase
+                    (format nil "|%s" 
+                      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.daughtern.R:SylStructure.daughtern.tobi_endtone"))
+               )
+  )
+  
 
 ;;;;;;;;;;;;;;;;;;;;
 ;; next phrase
+  (set! output (string-append output 
+                ;  length of next phrase (syllable)
+                  (format nil "/I:%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        (item.feat s "n.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_syls_in_phrase")
+                        (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.n.lisp_num_syls_in_phrase")))
+
+                ;  length of next phrase (word)
+                  (format nil "=%s" 
+                    (if (string-equal "pau" (item.feat s "name"))
+                        (item.feat s "n.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_words_in_phrase")
+                        (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.n.lisp_num_words_in_phrase")))
+               )
+  )
+
+
 
-;  length of next phrase (syllable)
-  (format ofd "/I:%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_syls_in_phrase")
-	      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.n.lisp_num_syls_in_phrase")))
-
-;  length of next phrase (word)
-  (format ofd "=%s" 
-	  (if (string-equal "pau" (item.feat s "name"))
-	      (item.feat s "n.R:SylStructure.parent.parent.R:Phrase.parent.lisp_num_words_in_phrase")
-	      (item.feat s "R:SylStructure.parent.parent.R:Phrase.parent.n.lisp_num_words_in_phrase")))
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;  UTTERANCE
+  (set! output (string-append output 
+                      ;  length (syllable)
+                        (format nil "/J:%s" (item.feat s "lisp_total_syls"))
 
-;  length (syllable)
-  (format ofd "/J:%s" (item.feat s "lisp_total_syls"))
+                      ;  length (word)
+                        (format nil "+%s" (item.feat s "lisp_total_words"))
 
-;  length (word)
-  (format ofd "+%s" (item.feat s "lisp_total_words"))
+                      ;  length (phrase)
+                        (format nil "-%s" (item.feat s "lisp_total_phrases"))
 
-;  length (phrase)
-  (format ofd "-%s" (item.feat s "lisp_total_phrases"))
+                        (format nil "\n")
+              )
+  )
 
-  (format ofd "\n")
+  output)
+)
 
+(define (hts_dump_feats_string utt feats)
+   (let ((output ""))
+    (mapcar
+     (lambda (s)
+       (set! output (string-append output (hts_feats_output_string s))))
+     (utt.relation.items utt 'Segment))
+    output)
 )
+    
 
 (define (hts_dump_feats utt feats ofile)
   (let ((ofd (fopen ofile "w")))
